AWSTemplateFormatVersion: "2010-09-09"
Description: >
  CloudFormation template to create an Amazon Aurora PostgreSQL Serverless v2 cluster
  with automatic scaling capabilities. 

Parameters:
  DBPort:
    Type: Number
    Description: Database port
  AppName:
    Type: String

Resources:

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Aurora PostgreSQL Serverless v2 cluster
      SubnetIds:
        - '{{resolve:ssm:/net/subnets/dbsubnet1/id}}'
        - '{{resolve:ssm:/net/subnets/dbsubnet2/id}}'
      Tags:
        - Key: Name
          Value: "postgresql-subnets"

  DBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-postgresql
      EngineVersion: '{{resolve:ssm:/params/pg_engine_version}'
      EngineMode: provisioned
      DatabaseName: !Sub '{{resolve:ssm:/params/env_name}}-${AppName}-pg-cluster'
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds: '{{resolve:ssm:/ec2/securitygroups/db-sg/id}}'
      Port: !Ref DBPort

      # BackupRetentionPeriod: !Ref DBBackupRetentionDays
      # PreferredBackupWindow: "06:00-07:00"
      # PreferredMaintenanceWindow: "sat:07:00-sun:08:00"

      # Encryption
      StorageEncrypted: true
      # KmsKeyId: !If [UseKmsKey, !Ref KmsKeyArn, !Ref "AWS::NoValue"]

      # AuthN: no static password + IAM auth enabled
      ManageMasterUserPassword: true            # Auto-generates and stores master password in Secrets Manager
      # MasterUsername: !Ref MasterUsername
      EnableIAMDatabaseAuthentication: true     # Allow token-based IAM auth

      # Logs
      EnableCloudwatchLogsExports:
        - postgresql

      # Deletion protection
      #DeletionProtection: !If [!Equals [!Ref DeletionProtection, "true"], true, false]

      # Serverless v2 scaling
      ServerlessV2ScalingConfiguration:
        MinCapacity: '{{resolve:ssm:/params/db_min_acu}}'
        MaxCapacity: '{{resolve:ssm:/params/db_min_acu}}'

      # Tags:
      #   - Key: Name
      #     Value: !Ref ClusterName

  # At least one instance is required for an Aurora v2 cluster.
  # Use the special 'db.serverless' class for Serverless v2.
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: db.serverless
      Engine: aurora-postgresql
      PubliclyAccessible: false
      AutoMinorVersionUpgrade: true
      #EnablePerformanceInsights: !If [EnablePI, true, false]
      MonitoringInterval: 0  # set >0 with a role for Enhanced Monitoring
      Tags:
        - Key: Name
          Value: !Sub '{{resolve:ssm:/params/env_name}}-${AppName}'

# Outputs:
#   ClusterArn:
#     Description: ARN of the Aurora PostgreSQL Serverless v2 cluster
#     Value: !Ref DBCluster
#     Export:
#       Name: !Sub "${AWS::StackName}-ClusterArn"

#   Endpoint:
#     Description: Writer endpoint hostname
#     Value: !GetAtt DBCluster.Endpoint.Address
#     Export:
#       Name: !Sub "${AWS::StackName}-WriterEndpoint"

#   ReaderEndpoint:
#     Description: Reader endpoint hostname
#     Value: !GetAtt DBCluster.ReadEndpoint.Address
#     Export:
#       Name: !Sub "${AWS::StackName}-ReaderEndpoint"

#   Port:
#     Description: PostgreSQL port
#     Value: !Ref DBPort

#   SecurityGroupId:
#     Description: Security Group ID attached to the cluster
#     Value: !Ref ClusterSecurityGroup

#   MasterUserSecretArn:
#     Description: Secrets Manager ARN for the auto-generated master password
#     Value: !GetAtt DBCluster.MasterUserSecret.SecretArn
#     Export:
#       Name: !Sub "${AWS::StackName}-MasterUserSecretArn"